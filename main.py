import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import openai
from gtts import gTTS
from aiogram.types import InputFile

# ==============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================
logging.basicConfig(level=logging.INFO)

# ==============================
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==============================
load_dotenv()

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_API_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError(
        "‚ùå TELEGRAM_API_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. "
        "–ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env –∏–ª–∏ Render Environment Variables."
)

# ==============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# ==============================
openai.api_key = OPENAI_API_KEY

# ==============================
# –°–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–∞
# ==============================
bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)

# ==============================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ==============================
user_data = {}

# ==============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ OpenAI
# ==============================
async def generate_story(child_name: str, topic: str) -> str:
    try:
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=f"–°–æ—á–∏–Ω–∏ –¥–æ–±—Ä—É—é –∏ –≤–µ—Å—ë–ª—É—é –¥–µ—Ç—Å–∫—É—é —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {child_name} –Ω–∞ —Ç–µ–º—É {topic}.",
            max_tokens=500,
            temperature=0.8,
            top_p=1,
        )
        return response.choices[0].text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return None

# ==============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏
# ==============================
def generate_audio(text: str, filename="story.mp3") -> str:
    try:
        tts = gTTS(text=text, lang="ru")
        tts.save(filename)
        return filename
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

# ==============================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ==============================
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ—á–∏–Ω—è—Ç—å —Å–∫–∞–∑–∫–∏?")
    user_data[message.from_user.id] = {}

# ==============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
# ==============================
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞ –µ—â—ë –Ω–µ—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if "child_name" not in user_data[user_id]:
        user_data[user_id]["child_name"] = message.text
        await message.answer(f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {message.text}? –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ ‚ú®")
        return

    # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    if "topic" not in user_data[user_id]:
        user_data[user_id]["topic"] = message.text
        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        child_name = user_data[user_id]["child_name"]
        topic = user_data[user_id]["topic"]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏
        story = await generate_story(child_name, topic)
        if not story:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏
        await message.answer(f"–í–æ—Ç —Ç–≤–æ—è —Å–∫–∞–∑–∫–∞:\n\n{story}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        audio_path = generate_audio(story)
        if audio_path:
            await message.answer_audio(InputFile(audio_path))
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ üò¢")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data.pop(user_id, None)

# ==============================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==============================
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
