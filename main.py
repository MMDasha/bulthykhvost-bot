import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from openai import OpenAI
from gtts import gTTS

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_API_TOKEN = os.getenv("7254440299:AAGz0kKhM1WedHDxNhYuqSOKDPSJ-p6PrVE")
OPENAI_API_KEY = os.getenv("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")

if not TELEGRAM_API_TOKEN:
    raise EnvironmentError("TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
bot = Bot(token=TELEGRAM_API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

client = OpenAI(api_key=OPENAI_API_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∫–∞–∑–∫–∏
user_state = {}


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?")
    user_state[message.from_user.id] = {"step": "child_name"}


@dp.message_handler()
async def handle_message(message: types.Message):
    state = user_state.get(message.from_user.id, {})

    if state.get("step") == "child_name":
        child_name = message.text.strip()
        state["child_name"] = child_name
        state["step"] = "story_theme"
        await message.answer(f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {child_name}? –û—Ç–ª–∏—á–Ω–æ! ‚ú® –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏.")
        return

    if state.get("step") == "story_theme":
        theme = message.text.strip()
        child_name = state.get("child_name")

        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü—Ä–∏–¥—É–º—ã–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∫–∞–∑–∫–∏ (10-15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."},
                    {"role": "user", "content": f"–ü—Ä–∏–¥—É–º–∞–π —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ {child_name} –Ω–∞ —Ç–µ–º—É: {theme}"}
                ],
                max_tokens=400
            )

            story = response.choices[0].message["content"].strip()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏
            await message.answer(story)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –æ–∑–≤—É—á–∫–∞ —Å–∫–∞–∑–∫–∏
            tts = gTTS(text=story, lang="ru")
            voice_file = f"story_{message.from_user.id}.mp3"
            tts.save(voice_file)

            with open(voice_file, "rb") as f:
                await message.answer_voice(f)

            os.remove(voice_file)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–∑–∫–∏: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
