import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from openai import OpenAI

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
logging.info("=== BULTHYKHOVOST BOT START v3 ===")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv(override=False)  # .env –ª–æ–∫–∞–ª—å–Ω–æ, Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Service Variables

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
logging.info("ENV has TELEGRAM_API_TOKEN? %s", "TELEGRAM_API_TOKEN" in os.environ)
logging.info("ENV has BOT_TOKEN? %s", "BOT_TOKEN" in os.environ)
logging.info("ENV has OPENAI_API_KEY? %s", "OPENAI_API_KEY" in os.environ)

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN") or os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

logging.info("TELEGRAM_API_TOKEN detected: %s", bool(TELEGRAM_API_TOKEN))
logging.info("OPENAI_API_KEY detected: %s", bool(OPENAI_API_KEY))

if not TELEGRAM_API_TOKEN:
    raise EnvironmentError("TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç üêæ –ù–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ—ë —Å–æ—á–∏–Ω–∏—Ç—å!")

@dp.message()
async def handle_message(message: Message):
    topic = message.text.strip()

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Å–∫–∞–∑–æ—á–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π."},
                {"role": "user", "content": f"–°–æ—á–∏–Ω–∏ —Å–∫–∞–∑–∫—É –Ω–∞ —Ç–µ–º—É: {topic}"}
            ]
        )
        story = completion.choices[0].message.content
        await message.answer(story)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–∑–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
