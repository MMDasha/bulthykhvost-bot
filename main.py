# main.py
import os
import logging
import asyncio
from typing import Dict

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.exceptions import Throttled
from dotenv import load_dotenv

# OpenAI (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)
from openai import OpenAI

# -------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / —Ç–æ–∫–µ–Ω—ã
# -------------------
load_dotenv()

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_API_TOKEN:
    raise EnvironmentError("TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# -------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("bulthykhvost-bot")

# -------------------
# Telegram
# -------------------
bot = Bot(token=TELEGRAM_API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# -------------------
# OpenAI –∫–ª–∏–µ–Ω—Ç
# -------------------
client = OpenAI(api_key=OPENAI_API_KEY)

# -------------------
# –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–æ—Ä–µ–¥–∂ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# stage: "ask_name" -> "ask_topic" -> "idle"
# -------------------
UserState = Dict[int, Dict[str, str]]
state: UserState = {}

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n"
    "–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?"
)

ASK_TOPIC = "–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî <b>{name}</b>? –û—Ç–ª–∏—á–Ω–æ! ‚ú® –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏."

TYPING = "–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ"

FAILED = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —á—É—Ç—å –ø–æ–∑–∂–µ."


async def throttle_message(message: types.Message, key: str, rate: float = 1.0):
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω—Ç–∏—Å–ø–∞–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
    """
    try:
        await dp.throttle(key, rate=rate)
    except Throttled:
        await message.answer("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É‚Ä¶")
        raise


def build_prompt(child_name: str, topic: str) -> str:
    return (
        "–¢—ã –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –°–æ—á–∏–Ω–∏ —Ç—ë–ø–ª—É—é, –¥–æ–±—Ä—É—é –¥–µ—Ç—Å–∫—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}\n"
        f"–¢–µ–º–∞: {topic}\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ 8‚Äì12 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤ (–Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ)\n"
        "‚Ä¢ –Ø—Ä–∫–∏–µ, –Ω–æ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–∑—ã\n"
        "‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω –∏ —Ç—ë–ø–ª–∞—è –º–æ—Ä–∞–ª—å –≤ –∫–æ–Ω—Ü–µ\n"
        "‚Ä¢ –ë–µ–∑ –Ω–∞—Å–∏–ª–∏—è –∏ –ø—É–≥–∞—é—â–∏—Ö —Å—Ü–µ–Ω\n"
    )


async def generate_story(child_name: str, topic: str) -> str:
    """
    –í—ã–∑–æ–≤ OpenAI Chat Completions (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
