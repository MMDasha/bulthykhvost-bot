# main.py
import os
import logging
from io import BytesIO

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from gtts import gTTS

# –ù–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK OpenAI (v1)
from openai import OpenAI
from openai._exceptions import OpenAIError

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# –õ–æ–∫–∞–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç .env; –Ω–∞ Railway/Render –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ Variables
load_dotenv()

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å gpt-3.5-turbo-0125

if not TELEGRAM_API_TOKEN:
    raise EnvironmentError("TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ --------------------
bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∏–º—è -> —Ç–µ–º–∞
user_state = {}  # chat_id -> {"wait": "name"|"topic", "name": str}

# -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏ --------------------
def generate_story(child_name: str, topic: str) -> str:
    """
    –ó–∞–ø—Ä–æ—Å –∫ OpenAI Chat Completions.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏ –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """
    system_prompt = (
        "–¢—ã –¥–æ–±—Ä—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç—ë–ø–ª—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∫–∞–∑–∫–∏ "
        "—Å –≥–µ—Ä–æ–µ–º –ø–æ –∏–º–µ–Ω–∏ –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç. –ò–∑–±–µ–≥–∞–π —Å—Ç—Ä–∞—à–Ω—ã—Ö –º–æ—Ç–∏–≤–æ–≤. –í –∫–æ–Ω—Ü–µ ‚Äî —Å–≤–µ—Ç–ª—ã–π –¥–æ–±—Ä—ã–π —Ñ–∏–Ω–∞–ª."
    )
    user_prompt = (
        f"–°–æ—á–∏–Ω–∏ —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {child_name}. "
        f"–¢–µ–º–∞: {topic}. –û–±—ä—ë–º 8‚Äì12 –Ω–µ–±–æ–ª—å—à–∏—Ö –∞–±–∑–∞—Ü–µ–≤."
    )

    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.8,
            max_tokens=900,
        )
        return resp.choices[0].message.content.strip()
    except OpenAIError as e:
        logging.error(f"OpenAI error: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ –Ω–∞ gpt-3.5-turbo-0125, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        try:
            resp = client.chat.completions.create(
                model="gpt-3.5-turbo-0125",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.8,
                max_tokens=900,
            )
            return resp.choices[0].message.content.strip()
        except Exception as e2:
            logging.error(f"Fallback model failed: {e2}")
            raise
    except Exception as e:
        logging.exception("Unexpected error while calling OpenAI")
        raise

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    user_state[message.chat.id] = {"wait": "name"}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n"
        "–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–æ—á–∏–Ω—è—Ç—å —Å–∫–∞–∑–∫–∏?\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, /cancel ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥."
    )

@dp.message_handler(commands=["cancel"])
async def cmd_cancel(message: types.Message):
    user_state[message.chat.id] = {"wait": "name"}
    await message.answer("–û–∫–µ–π, –≤—Å—ë —Å–±—Ä–æ—Å–∏–ª. –ù–∞–ø–∏—à–∏ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ üôÇ")

@dp.message_handler()
async def handle_dialog(message: types.Message):
    chat_id = message.chat.id
    st = user_state.get(chat_id, {"wait": "name"})

    # –ñ–¥—ë–º –∏–º—è
    if st.get("wait") == "name":
        name = message.text.strip()
        if not name:
            await message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è —Ä–µ–±—ë–Ω–∫–∞.")
            return

        st["name"] = name
        st["wait"] = "topic"
        user_state[chat_id] = st

        await message.answer(
            f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {name}? –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ ‚ú®"
        )
        return

    # –ñ–¥—ë–º —Ç–µ–º—É
    if st.get("wait") == "topic":
        topic = message.text.strip()
        name = st.get("name", "–†–µ–±—ë–Ω–æ–∫")

        if not topic:
            await message.answer("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–º—É —Å–∫–∞–∑–∫–∏.")
            return

        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏
        try:
            story = generate_story(name, topic)
        except Exception:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(story)

        # –ü—Ä–æ–±—É–µ–º –æ–∑–≤—É—á–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ
        try:
            tts = gTTS(story, lang="ru")
            buf = BytesIO()
            tts.write_to_fp(buf)
            buf.seek(0)
            await message.answer_voice(voice=buf, caption="–°–∫–∞–∑–∫–∞ –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç üéôÔ∏è")
        except Exception as e:
            logging.error(f"gTTS error: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—É—é —Å–∫–∞–∑–∫—É
        user_state[chat_id] = {"wait": "name"}
        await message.answer("–•–æ—á–µ—à—å –µ—â—ë —Å–∫–∞–∑–∫—É? –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º—É üòä")
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ
    user_state[chat_id] = {"wait": "name"}
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?")

# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------
if __name__ == "__main__":
    logging.info(f"Starting Bulthykhvost bot with model: {OPENAI_MODEL}")
    executor.start_polling(dp, skip_updates=True)
