import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import openai
from gtts import gTTS
from uuid import uuid4

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_data = {}

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ—á–∏–Ω—è—Ç—å —Å–∫–∞–∑–∫–∏?")
    user_data[message.from_user.id] = {}

@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if 'child_name' not in user_data.get(user_id, {}):
        user_data[user_id] = {'child_name': text}
        await message.answer(f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {text}? –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ üåü")
    else:
        child_name = user_data[user_id]['child_name']
        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        prompt = (
            f"–°–æ—á–∏–Ω–∏ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É —Å –≤–æ–ª—à–µ–±–Ω—ã–º –≥–µ—Ä–æ–µ–º –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç–æ–º. "
            f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {child_name}. –¢–µ–º–∞ —Å–∫–∞–∑–∫–∏: {text}. "
            f"–°–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–π, –≤–µ—Å—ë–ª–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è –¥–µ—Ç–µ–π 4‚Äì6 –ª–µ—Ç."
        )

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.9,
                max_tokens=600,
                request_timeout=20
            )
            story = response.choices[0].message.content.strip()
            await message.answer(story)

        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            print(f"[OpenAI ERROR]: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
