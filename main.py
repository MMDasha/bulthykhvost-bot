import os
import logging
from io import BytesIO

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from gtts import gTTS

# –ù–æ–≤—ã–π OpenAI SDK v1
from openai import OpenAI
from openai._exceptions import OpenAIError

# -------------------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ --------------------
load_dotenv()  # –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç .env; –Ω–∞ Railway –±–µ—Ä—ë—Ç –∏–∑ Variables

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-3.5-turbo-0125

if not TELEGRAM_API_TOKEN:
    raise EnvironmentError("TELEGRAM_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∏–º—è ‚Üí —Ç–µ–º–∞
state = {}  # chat_id -> {"wait": "name"/"topic", "name": ...}

def make_story(name: str, topic: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    system = ("–¢—ã –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ —Å–∫–∞–∑–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –≥–µ—Ä–æ–µ–º –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç. "
              "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–µ—Ç—è–º 4‚Äì6 –ª–µ—Ç, –±–µ–∑ –ø—É–≥–∞—é—â–∏—Ö —Å—Ü–µ–Ω.")
    user = f"–°–æ—á–∏–Ω–∏ —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {name}. –¢–µ–º–∞: {topic}. –û–±—ä—ë–º ~8 –∞–±–∑–∞—Ü–µ–≤, —Ñ–∏–Ω–∞–ª –¥–æ–±—Ä—ã–π."
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": user},
            ],
            temperature=0.8,
            max_tokens=800,
        )
        return resp.choices[0].message.content.strip()
    except OpenAIError as e:
        logging.error(f"OpenAI error: {e}")
        raise
    except Exception as e:
        logging.exception("Unexpected error calling OpenAI")
        raise

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    state[message.chat.id] = {"wait": "name"}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?")

@dp.message_handler()
async def handle_all(message: types.Message):
    s = state.get(message.chat.id, {"wait": "name"})

    if s.get("wait") == "name":
        s["name"] = message.text.strip()
        s["wait"] = "topic"
        state[message.chat.id] = s
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {s['name']}! –ù–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ ‚ú®")
        return

    if s.get("wait") == "topic":
        name = s.get("name", "–†–µ–±—ë–Ω–æ–∫")
        topic = message.text.strip()
        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        try:
            story = make_story(name, topic)
            # –¢–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏
            await message.answer(story)

            # –û–∑–≤—É—á–∫–∞ gTTS ‚Üí –≥–æ–ª–æ—Å–æ–≤–æ–µ
            try:
                tts = gTTS(story, lang="ru")
                buf = BytesIO()
                tts.write_to_fp(buf)
                buf.seek(0)
                await message.answer_voice(voice=buf, caption="–°–∫–∞–∑–∫–∞ –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç üéôÔ∏è")
            except Exception as e:
                logging.error(f"gTTS error: {e}")

            # –°–±—Ä–æ—Å
            state[message.chat.id] = {"wait": "name"}
            await message.answer("–•–æ—á–µ—à—å –µ—â—ë —Å–∫–∞–∑–∫—É? –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º—É üòä")

        except Exception:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á OpenAI –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    state[message.chat.id] = {"wait": "name"}
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?")

if __name
