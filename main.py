import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai
from gtts import gTTS
from io import BytesIO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –≤ –ø–∞–º—è—Ç–∏
user_name = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üê¨ –Ø –±–æ—Ç –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç.\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?")
    user_name[message.from_user.id] = None

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
@dp.message_handler(lambda msg: user_name.get(msg.from_user.id) is None)
async def save_child_name(message: types.Message):
    user_name[message.from_user.id] = message.text
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {message.text}! üéâ\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–∑–≤—É—á–∫–∏
@dp.message_handler()
async def generate_story(message: types.Message):
    try:
        child = user_name.get(message.from_user.id, "—Ä–µ–±—ë–Ω–æ–∫")
        topic = message.text

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏
        prompt = f"–°–æ—á–∏–Ω–∏ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç –∏ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {child}. –¢–µ–º–∞: {topic}."
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=600,
            temperature=0.8
        )
        story = response.choices[0].text.strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏
        await message.answer(f"üìñ –í–æ—Ç —Ç–≤–æ—è —Å–∫–∞–∑–∫–∞:\n\n{story}")

        # –°–æ–∑–¥–∞—ë–º –æ–∑–≤—É—á–∫—É
        tts = gTTS(text=story, lang="ru")
        audio_bytes = BytesIO()
        tts.write_to_fp(audio_bytes)
        audio_bytes.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await message.answer_audio(audio=audio_bytes, title="–°–∫–∞–∑–∫–∞ –ë—É–ª—Ç—ã—Ö–≤–æ—Å—Ç")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(dp.start_polling())
