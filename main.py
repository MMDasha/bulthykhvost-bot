import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import openai
from gtts import gTTS
from uuid import uuid4

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ë—É–ª—å—Ç—ã—Ö–≤–æ—Å—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫ üêæ\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ—á–∏–Ω—è—Ç—å —Å–∫–∞–∑–∫–∏?")
    user_data[message.from_user.id] = {"stage": "name"}

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    stage = user_data[user_id].get("stage")

    if stage == "name":
        child_name = message.text.strip()
        user_data[user_id]["child_name"] = child_name
        user_data[user_id]["stage"] = "topic"
        await message.answer(f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ ‚Äî {child_name}? –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ üåü")

    elif stage == "topic":
        story_topic = message.text.strip()
        child_name = user_data[user_id].get("child_name", "–ú–∞–ª—ã—à")
        await message.answer("–ü–∏—à—É —Å–∫–∞–∑–∫—É... üìñ")

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫, —Å–æ—á–∏–Ω—è–π —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π."},
                    {"role": "user", "content": f"–°–æ—á–∏–Ω–∏ —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {child_name} –Ω–∞ —Ç–µ–º—É {story_topic}."}
                ]
            )
            story_text = response['choices'][0]['message']['content']
            await message.answer(story_text)
        except Exception as e:
            print(f"OpenAI Error: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

        user_data[user_id]["stage"] = "done"

    else:
        await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å /start")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

